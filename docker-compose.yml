# -----------------------------------------------------------------------------------
#  Commands to run this compose file:
#    docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
#    - this command will start the containers in detached mode without rebuilding the images (if they already exist)
#
#    docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d --build
#
#    docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d --build
#    - this command forces the rebuild of images, even if the images already exist. Before starting the containers
# -----------------------------------------------------------------------------------

version: '4.0'

services:

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./local-docker-file/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - postgres-keycloak
    networks:
      - spring

  api-gateway:
    image: api-gateway
    ports:
      - "9000:9000"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
#      SPRING_APPLICATION_JSON={"logging":{"level":{"root":"INFO, "ca.gbc.apigateway":"DEBUG}:
      SPRING_APPLICATION_JSON={"logging":{"level":{"root":"INFO","ca:gbc:apigateway":"DEBUG"}}}:
    container_name: api-gateway
    networks:
      - spring

  product-service:
    image: product-service
    ports:
      - "8084:8084"
    build:
      context: ./product-service     # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile       # Specify the Dockerfile for use to build image
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  order-service:
    image: order-service
    ports:
      - "8085:8085"
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    container_name: order-service
    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/order-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/order-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: none # uncomment this when running 3 new
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
#      - postgres
      - postgres-order # update this and comment out above when adding 3 new postgres containers
    networks:
      - spring

  inventory-service:
    image: inventory-service
    ports:
      - "8086:8086"
    build:
      context: ./inventory-service   # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile       # Specify the Dockerfile for use to build image
    container_name: inventory-service
    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventory-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory:5432/inventory-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: none # uncomment this when running 3 new
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
#      - postgres
      - postgres-inventory # update this and comment out above when adding 3 new postgres containers
    networks:
      - spring

# comment this out when testing the other 3
#  postgres:
#    image: postgres
#    container_name: postgres
#    ports:
#      - "5433:5432"
#    environment:
#      POSTGRES_USER: admin
#      POSTGRES_PASSWORD: password
#    volumes:
#      - ./data/postgres:/var/lib/postgresql/data
#      - ./local-docker-file/postgres/init/order/init.sql:/docker-entrypoint-initdb.d/init-order.sql
#      - ./local-docker-file/postgres/init/inventory/init.sql:/docker-entrypoint-initdb.d/init-inventory.sql
#    networks:
#      - spring

  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb # this
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    #command: mongod --auth
    networks:
      - spring

# postgres-keycloak
  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./data/postgres/postgres-keycloak:/data/postgres
    ports:
      - "5431:5432"
    networks:
      - spring

# postgres-inventory
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./data/inventory:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    networks:
      - spring

# postgres-order
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./data/postgres/postgres-order:/data/postgres
      - ./init/postgres/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "8889:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
#    depends_on: # this
#      - postgres
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express
    depends_on:
      - mongodb
    networks:
      - spring

# Optional volumes section for persisting data
volumes:
  mongo-db:
    driver: local

networks:
  spring:
    driver: bridge